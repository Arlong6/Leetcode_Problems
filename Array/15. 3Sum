/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int cmp(const void *a, const void *b){
    return (*(int*)a - *(int*)b);
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    int maxResults = numsSize *numsSize;
    int** results = (int**)malloc(maxResults *sizeof(int*));
    *returnColumnSizes = (int*)malloc(maxResults*sizeof(int));
    *returnSize = 0;


    qsort(nums, numsSize, sizeof(int), cmp);
    for (int i =0 ; i <numsSize-2;i++){
        if (i>0&&nums[i]==nums[i-1]) continue;

        int left = i+1;
        int right = numsSize-1;

        while(left<right){
            int sum = nums[i] +nums[left] +nums[right];
        
        if (sum==0){
            results[*returnSize] = (int*)malloc(3*sizeof(int));
            results[*returnSize][0] = nums[i];
            results[*returnSize][1] = nums[left];
            results[*returnSize][2] = nums[right];
            (*returnColumnSizes)[*returnSize] = 3;
            (*returnSize)++;
            while(left<right && nums[left]==nums[left+1]) left++;
            while(left<right && nums[right]==nums[right-1]) right--;
            left++;
            right--;
        }
        else if (sum<0){
            left++;
        }
        else{
            right--;
        }
        }
    }
    results = (int**)realloc(results, (*returnSize)*sizeof(int*));
    *returnColumnSizes = (int*)realloc(*returnColumnSizes, (*returnSize)*sizeof(int));

    return results;
}
